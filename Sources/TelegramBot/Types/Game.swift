// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation
import SwiftyJSON

/// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
///
/// - SeeAlso: <https://core.telegram.org/bots/api#game>

public struct Game: JsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: JSON

    /// Title of the game
    public var title: String {
        get { return json["title"].stringValue }
        set { json["title"].stringValue = newValue }
    }

    /// Description of the game
    public var description: String {
        get { return json["description"].stringValue }
        set { json["description"].stringValue = newValue }
    }

    /// Photo that will be displayed in the game message in chats.
    public var photo: [PhotoSize] {
        get { return json["photo"].arrayValue() }
        set { json["photo"] = JSON.initFrom(newValue) }
    }

    /// Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters.
    public var text: String? {
        get { return json["text"].string }
        set { json["text"].string = newValue }
    }

    /// Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
    public var text_entities: [MessageEntity] {
        get { return json["text_entities"].arrayValue() }
        set { json["text_entities"] = newValue.isEmpty ? nil : JSON.initFrom(newValue) }
    }

    /// Optional. Animation that will be displayed in the game message in chats. Upload via BotFather
    public var animation: Animation? {
        get {
            let value = json["animation"]
            return value.isNullOrUnknown ? nil : Animation(json: value)
        }
        set {
            json["animation"] = newValue?.json ?? nil
        }
    }

    public init(json: JSON = [:]) {
        self.json = json
    }
}
