// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation
import Dispatch

public extension TelegramBot {
    typealias UnbanChatMemberCompletion = (_ result: Bool?, _ error: DataTaskError?) -> ()

    /// Use this method to unban a previously kicked user in a supergroup. The user will not return to the group automatically, but will be able to join via link, etc. The bot must be an administrator in the group for this to work. Returns True on success.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)
    ///     - user_id: Unique identifier of the target user
    /// - Returns: Bool on success. Nil on error, in which case `TelegramBot.lastError` contains the details.
    /// - Note: Blocking version of the method.
    ///
    /// - SeeAlso: <https://core.telegram.org/bots/api#unbanchatmember>
    @discardableResult
    public func unbanChatMemberSync(
            chat_id: ChatId,
            user_id: Int64,
            _ parameters: [String: Any?] = [:]) -> Bool? {
        return requestSync("unbanChatMember", defaultParameters["unbanChatMember"], parameters, [
            "chat_id": chat_id,
            "user_id": user_id])
    }

    /// Use this method to unban a previously kicked user in a supergroup. The user will not return to the group automatically, but will be able to join via link, etc. The bot must be an administrator in the group for this to work. Returns True on success.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)
    ///     - user_id: Unique identifier of the target user
    /// - Returns: Bool on success. Nil on error, in which case `error` contains the details.
    /// - Note: Asynchronous version of the method.
    ///
    /// - SeeAlso: <https://core.telegram.org/bots/api#unbanchatmember>
    public func unbanChatMemberAsync(
            chat_id: ChatId,
            user_id: Int64,
            _ parameters: [String: Any?] = [:],
            queue: DispatchQueue = .main,
            completion: UnbanChatMemberCompletion? = nil) {
        return requestAsync("unbanChatMember", defaultParameters["unbanChatMember"], parameters, [
            "chat_id": chat_id,
            "user_id": user_id],
            queue: queue, completion: completion)
    }
}

