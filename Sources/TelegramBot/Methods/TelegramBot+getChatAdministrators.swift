// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation
import Dispatch

public extension TelegramBot {
    typealias GetChatAdministratorsCompletion = (_ result: [ChatMember]?, _ error: DataTaskError?) -> ()

    /// Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
    /// - Returns: [ChatMember] on success. Nil on error, in which case `TelegramBot.lastError` contains the details.
    /// - Note: Blocking version of the method.
    ///
    /// - SeeAlso: <https://core.telegram.org/bots/api#getchatadministrators>
    @discardableResult
    public func getChatAdministratorsSync(
            chat_id: ChatId,
            _ parameters: [String: Any?] = [:]) -> [ChatMember]? {
        return requestSync("getChatAdministrators", defaultParameters["getChatAdministrators"], parameters, [
            "chat_id": chat_id])
    }

    /// Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
    /// - Returns: [ChatMember] on success. Nil on error, in which case `error` contains the details.
    /// - Note: Asynchronous version of the method.
    ///
    /// - SeeAlso: <https://core.telegram.org/bots/api#getchatadministrators>
    public func getChatAdministratorsAsync(
            chat_id: ChatId,
            _ parameters: [String: Any?] = [:],
            queue: DispatchQueue = .main,
            completion: GetChatAdministratorsCompletion? = nil) {
        return requestAsync("getChatAdministrators", defaultParameters["getChatAdministrators"], parameters, [
            "chat_id": chat_id],
            queue: queue, completion: completion)
    }
}

