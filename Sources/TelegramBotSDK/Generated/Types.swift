// This file is automatically generated by Rapier

import Foundation

public class Update: Codable {
    public var updateId: Int64
    public var message: Message?
    public var editedMessage: Message?
    public var channelPost: Message?
    public var editedChannelPost: Message?
    public var inlineQuery: InlineQuery?
    public var chosenInlineResult: ChosenInlineResult?
    public var callbackQuery: CallbackQuery?
    public var shippingQuery: ShippingQuery?
    public var preCheckoutQuery: PreCheckoutQuery?
    public var poll: Poll?
    public var pollAnswer: PollAnswer?
    public init(updateId: Int64, message: Message? = nil, editedMessage: Message? = nil, channelPost: Message? = nil, editedChannelPost: Message? = nil, inlineQuery: InlineQuery? = nil, chosenInlineResult: ChosenInlineResult? = nil, callbackQuery: CallbackQuery? = nil, shippingQuery: ShippingQuery? = nil, preCheckoutQuery: PreCheckoutQuery? = nil, poll: Poll? = nil, pollAnswer: PollAnswer? = nil) {
        self.updateId = updateId
        self.message = message
        self.editedMessage = editedMessage
        self.channelPost = channelPost
        self.editedChannelPost = editedChannelPost
        self.inlineQuery = inlineQuery
        self.chosenInlineResult = chosenInlineResult
        self.callbackQuery = callbackQuery
        self.shippingQuery = shippingQuery
        self.preCheckoutQuery = preCheckoutQuery
        self.poll = poll
        self.pollAnswer = pollAnswer
    }

}


public class WebhookInfo: Codable {
    public var url: String
    public var hasCustomCertificate: Bool
    public var pendingUpdateCount: Int
    public var lastErrorDate: Date?
    public var lastErrorMessage: String?
    public var maxConnections: Int?
    public var allowedUpdates: [String]? = []
    public init(url: String, hasCustomCertificate: Bool, pendingUpdateCount: Int, lastErrorDate: Date? = nil, lastErrorMessage: String? = nil, maxConnections: Int? = nil, allowedUpdates: [String]? = nil) {
        self.url = url
        self.hasCustomCertificate = hasCustomCertificate
        self.pendingUpdateCount = pendingUpdateCount
        self.lastErrorDate = lastErrorDate
        self.lastErrorMessage = lastErrorMessage
        self.maxConnections = maxConnections
        self.allowedUpdates = allowedUpdates
    }

}


public class User: Codable {
    public var id: Int64
    public var isBot: Bool
    public var firstName: String
    public var lastName: String?
    public var username: String?
    public var languageCode: String?
    public var canJoinGroups: Bool?
    public var canReadAllGroupMessages: Bool?
    public var supportsInlineQueries: Bool?
    public init(id: Int64, isBot: Bool, firstName: String, lastName: String? = nil, username: String? = nil, languageCode: String? = nil, canJoinGroups: Bool? = nil, canReadAllGroupMessages: Bool? = nil, supportsInlineQueries: Bool? = nil) {
        self.id = id
        self.isBot = isBot
        self.firstName = firstName
        self.lastName = lastName
        self.username = username
        self.languageCode = languageCode
        self.canJoinGroups = canJoinGroups
        self.canReadAllGroupMessages = canReadAllGroupMessages
        self.supportsInlineQueries = supportsInlineQueries
    }

}


public class Chat: Codable {
    public var id: Int64
    public var type: ChatType
    public var title: String?
    public var username: String?
    public var firstName: String?
    public var lastName: String?
    public var photo: ChatPhoto?
    public var description: String?
    public var inviteLink: String?
    public var pinnedMessage: Message?
    public var permissions: ChatPermissions?
    public var slowModeDelay: Int?
    public var stickerSetName: String?
    public var canSetStickerSet: Bool?
    public init(id: Int64, type: ChatType, title: String? = nil, username: String? = nil, firstName: String? = nil, lastName: String? = nil, photo: ChatPhoto? = nil, description: String? = nil, inviteLink: String? = nil, pinnedMessage: Message? = nil, permissions: ChatPermissions? = nil, slowModeDelay: Int? = nil, stickerSetName: String? = nil, canSetStickerSet: Bool? = nil) {
        self.id = id
        self.type = type
        self.title = title
        self.username = username
        self.firstName = firstName
        self.lastName = lastName
        self.photo = photo
        self.description = description
        self.inviteLink = inviteLink
        self.pinnedMessage = pinnedMessage
        self.permissions = permissions
        self.slowModeDelay = slowModeDelay
        self.stickerSetName = stickerSetName
        self.canSetStickerSet = canSetStickerSet
    }

}


public class Message: Codable {
    public var messageId: Int
    public var from: User?
    public var date: Date
    public var chat: Chat
    public var forwardFrom: User?
    public var forwardFromChat: Chat?
    public var forwardFromMessageId: Int?
    public var forwardSignature: String?
    public var forwardSenderName: String?
    public var forwardDate: Date?
    public var replyToMessage: Message?
    public var editDate: Date?
    public var mediaGroupId: String?
    public var authorSignature: String?
    public var text: String?
    public var entities: [MessageEntity]? = []
    public var captionEntities: [MessageEntity]? = []
    public var audio: Audio?
    public var document: Document?
    public var animation: Animation?
    public var game: Game?
    public var photo: [PhotoSize]? = []
    public var sticker: Sticker?
    public var video: Video?
    public var voice: Voice?
    public var videoNote: VideoNote?
    public var caption: String?
    public var contact: Contact?
    public var dice: Dice?
    public var location: Location?
    public var venue: Venue?
    public var poll: Poll?
    public var newChatMembers: [User]? = []
    public var leftChatMember: User?
    public var newChatTitle: String?
    public var newChatPhoto: [PhotoSize]? = []
    public var deleteChatPhoto: Bool?
    public var groupChatCreated: Bool?
    public var supergroupChatCreated: Bool?
    public var channelChatCreated: Bool?
    public var migrateToChatId: Int64?
    public var migrateFromChatId: Int64?
    public var pinnedMessage: Message?
    public var invoice: Invoice?
    public var successfulPayment: SuccessfulPayment?
    public var connectedWebsite: String?
    public var replyMarkup: InlineKeyboardMarkup?
    public init(messageId: Int, from: User? = nil, date: Date, chat: Chat, forwardFrom: User? = nil, forwardFromChat: Chat? = nil, forwardFromMessageId: Int? = nil, forwardSignature: String? = nil, forwardSenderName: String? = nil, forwardDate: Date? = nil, replyToMessage: Message? = nil, editDate: Date? = nil, mediaGroupId: String? = nil, authorSignature: String? = nil, text: String? = nil, entities: [MessageEntity]? = nil, captionEntities: [MessageEntity]? = nil, audio: Audio? = nil, document: Document? = nil, animation: Animation? = nil, game: Game? = nil, photo: [PhotoSize]? = nil, sticker: Sticker? = nil, video: Video? = nil, voice: Voice? = nil, videoNote: VideoNote? = nil, caption: String? = nil, contact: Contact? = nil, dice: Dice? = nil, location: Location? = nil, venue: Venue? = nil, poll: Poll? = nil, newChatMembers: [User]? = nil, leftChatMember: User? = nil, newChatTitle: String? = nil, newChatPhoto: [PhotoSize]? = nil, deleteChatPhoto: Bool? = nil, groupChatCreated: Bool? = nil, supergroupChatCreated: Bool? = nil, channelChatCreated: Bool? = nil, migrateToChatId: Int64? = nil, migrateFromChatId: Int64? = nil, pinnedMessage: Message? = nil, invoice: Invoice? = nil, successfulPayment: SuccessfulPayment? = nil, connectedWebsite: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil) {
        self.messageId = messageId
        self.from = from
        self.date = date
        self.chat = chat
        self.forwardFrom = forwardFrom
        self.forwardFromChat = forwardFromChat
        self.forwardFromMessageId = forwardFromMessageId
        self.forwardSignature = forwardSignature
        self.forwardSenderName = forwardSenderName
        self.forwardDate = forwardDate
        self.replyToMessage = replyToMessage
        self.editDate = editDate
        self.mediaGroupId = mediaGroupId
        self.authorSignature = authorSignature
        self.text = text
        self.entities = entities
        self.captionEntities = captionEntities
        self.audio = audio
        self.document = document
        self.animation = animation
        self.game = game
        self.photo = photo
        self.sticker = sticker
        self.video = video
        self.voice = voice
        self.videoNote = videoNote
        self.caption = caption
        self.contact = contact
        self.dice = dice
        self.location = location
        self.venue = venue
        self.poll = poll
        self.newChatMembers = newChatMembers
        self.leftChatMember = leftChatMember
        self.newChatTitle = newChatTitle
        self.newChatPhoto = newChatPhoto
        self.deleteChatPhoto = deleteChatPhoto
        self.groupChatCreated = groupChatCreated
        self.supergroupChatCreated = supergroupChatCreated
        self.channelChatCreated = channelChatCreated
        self.migrateToChatId = migrateToChatId
        self.migrateFromChatId = migrateFromChatId
        self.pinnedMessage = pinnedMessage
        self.invoice = invoice
        self.successfulPayment = successfulPayment
        self.connectedWebsite = connectedWebsite
        self.replyMarkup = replyMarkup
    }

}


public class MessageEntity: Codable {
    public var type: MessageEntityType
    public var offset: Int
    public var length: Int
    public var url: String?
    public var user: User?
    public var language: String?
    public init(type: MessageEntityType, offset: Int, length: Int, url: String? = nil, user: User? = nil, language: String? = nil) {
        self.type = type
        self.offset = offset
        self.length = length
        self.url = url
        self.user = user
        self.language = language
    }

}


public class PhotoSize: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var width: Int
    public var height: Int
    public var fileSize: Int?
    public init(fileId: String, fileUniqueId: String, width: Int, height: Int, fileSize: Int? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.width = width
        self.height = height
        self.fileSize = fileSize
    }

}


public class Audio: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var duration: Int
    public var performer: String?
    public var title: String?
    public var mimeType: String?
    public var fileSize: Int?
    public var thumb: PhotoSize?
    public init(fileId: String, fileUniqueId: String, duration: Int, performer: String? = nil, title: String? = nil, mimeType: String? = nil, fileSize: Int? = nil, thumb: PhotoSize? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.duration = duration
        self.performer = performer
        self.title = title
        self.mimeType = mimeType
        self.fileSize = fileSize
        self.thumb = thumb
    }

}


public class Document: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var thumb: PhotoSize?
    public var fileName: String?
    public var mimeType: String?
    public var fileSize: Int?
    public init(fileId: String, fileUniqueId: String, thumb: PhotoSize? = nil, fileName: String? = nil, mimeType: String? = nil, fileSize: Int? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.thumb = thumb
        self.fileName = fileName
        self.mimeType = mimeType
        self.fileSize = fileSize
    }

}


public class Video: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var width: Int
    public var height: Int
    public var duration: Int
    public var thumb: PhotoSize?
    public var mimeType: String?
    public var fileSize: Int?
    public init(fileId: String, fileUniqueId: String, width: Int, height: Int, duration: Int, thumb: PhotoSize? = nil, mimeType: String? = nil, fileSize: Int? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.width = width
        self.height = height
        self.duration = duration
        self.thumb = thumb
        self.mimeType = mimeType
        self.fileSize = fileSize
    }

}


public class Animation: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var width: Int
    public var height: Int
    public var duration: Int
    public var thumb: PhotoSize?
    public var fileName: String?
    public var mimeType: String?
    public var fileSize: Int?
    public init(fileId: String, fileUniqueId: String, width: Int, height: Int, duration: Int, thumb: PhotoSize? = nil, fileName: String? = nil, mimeType: String? = nil, fileSize: Int? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.width = width
        self.height = height
        self.duration = duration
        self.thumb = thumb
        self.fileName = fileName
        self.mimeType = mimeType
        self.fileSize = fileSize
    }

}


public class Voice: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var duration: Int
    public var mimeType: String?
    public var fileSize: Int?
    public init(fileId: String, fileUniqueId: String, duration: Int, mimeType: String? = nil, fileSize: Int? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.duration = duration
        self.mimeType = mimeType
        self.fileSize = fileSize
    }

}


public class VideoNote: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var length: Int
    public var duration: Int
    public var thumb: PhotoSize?
    public var fileSize: Int?
    public init(fileId: String, fileUniqueId: String, length: Int, duration: Int, thumb: PhotoSize? = nil, fileSize: Int? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.length = length
        self.duration = duration
        self.thumb = thumb
        self.fileSize = fileSize
    }

}


public class Contact: Codable {
    public var phoneNumber: String
    public var firstName: String
    public var lastName: String?
    public var userId: Int64?
    public var vcard: String?
    public init(phoneNumber: String, firstName: String, lastName: String? = nil, userId: Int64? = nil, vcard: String? = nil) {
        self.phoneNumber = phoneNumber
        self.firstName = firstName
        self.lastName = lastName
        self.userId = userId
        self.vcard = vcard
    }

}


public class Dice: Codable {
    public var emoji: String
    public var value: Int
    public init(emoji: String, value: Int) {
        self.emoji = emoji
        self.value = value
    }

}


public class Location: Codable {
    public var longitude: Float
    public var latitude: Float
    public init(longitude: Float, latitude: Float) {
        self.longitude = longitude
        self.latitude = latitude
    }

}


public class Venue: Codable {
    public var location: Location
    public var title: String
    public var address: String
    public var foursquareId: String?
    public var foursquareType: String?
    public init(location: Location, title: String, address: String, foursquareId: String? = nil, foursquareType: String? = nil) {
        self.location = location
        self.title = title
        self.address = address
        self.foursquareId = foursquareId
        self.foursquareType = foursquareType
    }

}


public class PollOption: Codable {
    public var text: String
    public var voterCount: Int
    public init(text: String, voterCount: Int) {
        self.text = text
        self.voterCount = voterCount
    }

}


public class PollAnswer: Codable {
    public var pollId: String
    public var user: User
    public var optionIds: [Int] = []
    public init(pollId: String, user: User, optionIds: [Int]) {
        self.pollId = pollId
        self.user = user
        self.optionIds = optionIds
    }

}


public class Poll: Codable {
    public var id: String
    public var question: String
    public var options: [PollOption] = []
    public var totalVoterCount: Int
    public var isClosed: Bool
    public var isAnonymous: Bool
    public var type: PollType
    public var allowsMultipleAnswers: Bool
    public var correctOptionId: Int?
    public var explanation: String
    public var explanationEntities: [MessageEntity]? = []
    public var openPeriod: Int?
    public var closeDate: Date?
    public init(id: String, question: String, options: [PollOption], totalVoterCount: Int, isClosed: Bool, isAnonymous: Bool, type: PollType, allowsMultipleAnswers: Bool, correctOptionId: Int? = nil, explanation: String, explanationEntities: [MessageEntity]? = nil, openPeriod: Int? = nil, closeDate: Date? = nil) {
        self.id = id
        self.question = question
        self.options = options
        self.totalVoterCount = totalVoterCount
        self.isClosed = isClosed
        self.isAnonymous = isAnonymous
        self.type = type
        self.allowsMultipleAnswers = allowsMultipleAnswers
        self.correctOptionId = correctOptionId
        self.explanation = explanation
        self.explanationEntities = explanationEntities
        self.openPeriod = openPeriod
        self.closeDate = closeDate
    }

}


public class UserProfilePhotos: Codable {
    public var totalCount: Int
    public var photos: [[PhotoSize]] = [[]]
    public init(totalCount: Int, photos: [[PhotoSize]]) {
        self.totalCount = totalCount
        self.photos = photos
    }

}


public class File: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var fileSize: Int?
    public var filePath: String?
    public init(fileId: String, fileUniqueId: String, fileSize: Int? = nil, filePath: String? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.fileSize = fileSize
        self.filePath = filePath
    }

}


public class ReplyKeyboardMarkup: Codable {
    public var keyboard: [[KeyboardButton]] = [[]]
    public var resizeKeyboard: Bool?
    public var oneTimeKeyboard: Bool?
    public var selective: Bool?
    public init(keyboard: [[KeyboardButton]], resizeKeyboard: Bool? = nil, oneTimeKeyboard: Bool? = nil, selective: Bool? = nil) {
        self.keyboard = keyboard
        self.resizeKeyboard = resizeKeyboard
        self.oneTimeKeyboard = oneTimeKeyboard
        self.selective = selective
    }

}


public class KeyboardButton: Codable {
    public var text: String
    public var requestContact: Bool?
    public var requestLocation: Bool?
    public var requestPoll: KeyboardButtonPollType?
    public init(text: String, requestContact: Bool? = nil, requestLocation: Bool? = nil, requestPoll: KeyboardButtonPollType? = nil) {
        self.text = text
        self.requestContact = requestContact
        self.requestLocation = requestLocation
        self.requestPoll = requestPoll
    }

}


public class KeyboardButtonPollType: Codable {
    public var type: PollType?
    public init(type: PollType? = nil) {
        self.type = type
    }

}


public class ReplyKeyboardRemove: Codable {
    public var removeKeyboard: Bool
    public var selective: Bool?
    public init(removeKeyboard: Bool, selective: Bool? = nil) {
        self.removeKeyboard = removeKeyboard
        self.selective = selective
    }

}


public class InlineKeyboardMarkup: Codable {
    public var inlineKeyboard: [[InlineKeyboardButton]] = [[]]
    public init(inlineKeyboard: [[InlineKeyboardButton]]) {
        self.inlineKeyboard = inlineKeyboard
    }

}


public class InlineKeyboardButton: Codable {
    public var text: String
    public var url: String?
    public var loginUrl: LoginUrl?
    public var callbackData: String?
    public var switchInlineQuery: String?
    public var switchInlineQueryCurrentChat: String?
    public var callbackGame: CallbackGame?
    public var pay: Bool?
    public init(text: String, url: String? = nil, loginUrl: LoginUrl? = nil, callbackData: String? = nil, switchInlineQuery: String? = nil, switchInlineQueryCurrentChat: String? = nil, callbackGame: CallbackGame? = nil, pay: Bool? = nil) {
        self.text = text
        self.url = url
        self.loginUrl = loginUrl
        self.callbackData = callbackData
        self.switchInlineQuery = switchInlineQuery
        self.switchInlineQueryCurrentChat = switchInlineQueryCurrentChat
        self.callbackGame = callbackGame
        self.pay = pay
    }

}


public class LoginUrl: Codable {
    public init() {
    }

}


public class CallbackQuery: Codable {
    public var id: String
    public var from: User
    public var message: Message?
    public var inlineMessageId: String?
    public var chatInstance: String
    public var data: String?
    public var gameShortName: String?
    public init(id: String, from: User, message: Message? = nil, inlineMessageId: String? = nil, chatInstance: String, data: String? = nil, gameShortName: String? = nil) {
        self.id = id
        self.from = from
        self.message = message
        self.inlineMessageId = inlineMessageId
        self.chatInstance = chatInstance
        self.data = data
        self.gameShortName = gameShortName
    }

}


public class ForceReply: Codable {
    public var forceReply: Bool
    public var selective: Bool?
    public init(forceReply: Bool, selective: Bool? = nil) {
        self.forceReply = forceReply
        self.selective = selective
    }

}


public class ChatPhoto: Codable {
    public var smallFileId: String
    public var smallFileUniqueId: String
    public var bigFileId: String
    public var bigFileUniqueId: String
    public init(smallFileId: String, smallFileUniqueId: String, bigFileId: String, bigFileUniqueId: String) {
        self.smallFileId = smallFileId
        self.smallFileUniqueId = smallFileUniqueId
        self.bigFileId = bigFileId
        self.bigFileUniqueId = bigFileUniqueId
    }

}


public class ChatMember: Codable {
    public var user: User
    public var status: Status
    public var customTitle: String?
    public var untilDate: Date?
    public var canBeEdited: Bool?
    public var canPostMessages: Bool?
    public var canEditMessages: Bool?
    public var canDeleteMessages: Bool?
    public var canRestrictMembers: Bool?
    public var canPromoteMembers: Bool?
    public var canChangeInfo: Bool?
    public var canInviteUsers: Bool?
    public var canPinMessages: Bool?
    public var isMember: Bool?
    public var canSendMessages: Bool?
    public var canSendMediaMessages: Bool?
    public var canSendPolls: Bool?
    public var canSendOtherMessages: Bool?
    public var canAddWebPagePreviews: Bool?
    public init(user: User, status: Status, customTitle: String? = nil, untilDate: Date? = nil, canBeEdited: Bool? = nil, canPostMessages: Bool? = nil, canEditMessages: Bool? = nil, canDeleteMessages: Bool? = nil, canRestrictMembers: Bool? = nil, canPromoteMembers: Bool? = nil, canChangeInfo: Bool? = nil, canInviteUsers: Bool? = nil, canPinMessages: Bool? = nil, isMember: Bool? = nil, canSendMessages: Bool? = nil, canSendMediaMessages: Bool? = nil, canSendPolls: Bool? = nil, canSendOtherMessages: Bool? = nil, canAddWebPagePreviews: Bool? = nil) {
        self.user = user
        self.status = status
        self.customTitle = customTitle
        self.untilDate = untilDate
        self.canBeEdited = canBeEdited
        self.canPostMessages = canPostMessages
        self.canEditMessages = canEditMessages
        self.canDeleteMessages = canDeleteMessages
        self.canRestrictMembers = canRestrictMembers
        self.canPromoteMembers = canPromoteMembers
        self.canChangeInfo = canChangeInfo
        self.canInviteUsers = canInviteUsers
        self.canPinMessages = canPinMessages
        self.isMember = isMember
        self.canSendMessages = canSendMessages
        self.canSendMediaMessages = canSendMediaMessages
        self.canSendPolls = canSendPolls
        self.canSendOtherMessages = canSendOtherMessages
        self.canAddWebPagePreviews = canAddWebPagePreviews
    }

}


public class ChatPermissions: Codable {
    public var canSendMessages: Bool?
    public var canSendMediaMessages: Bool?
    public var canSendPolls: Bool?
    public var canSendOtherMessages: Bool?
    public var canAddWebPagePreviews: Bool?
    public var canChangeInfo: Bool?
    public var canInviteUsers: Bool?
    public var canPinMessages: Bool?
    public init(canSendMessages: Bool? = nil, canSendMediaMessages: Bool? = nil, canSendPolls: Bool? = nil, canSendOtherMessages: Bool? = nil, canAddWebPagePreviews: Bool? = nil, canChangeInfo: Bool? = nil, canInviteUsers: Bool? = nil, canPinMessages: Bool? = nil) {
        self.canSendMessages = canSendMessages
        self.canSendMediaMessages = canSendMediaMessages
        self.canSendPolls = canSendPolls
        self.canSendOtherMessages = canSendOtherMessages
        self.canAddWebPagePreviews = canAddWebPagePreviews
        self.canChangeInfo = canChangeInfo
        self.canInviteUsers = canInviteUsers
        self.canPinMessages = canPinMessages
    }

}


public class BotCommand: Codable {
    public var command: String
    public var description: String
    public init(command: String, description: String) {
        self.command = command
        self.description = description
    }

}


public class ResponseParameters: Codable {
    public var migrateToChatId: Int64?
    public var retryAfter: Int?
    public init(migrateToChatId: Int64? = nil, retryAfter: Int? = nil) {
        self.migrateToChatId = migrateToChatId
        self.retryAfter = retryAfter
    }

}


public class InputMediaPhoto: Codable {
    public var type: String
    public var media: String
    public var caption: String?
    public var parseMode: ParseMode?
    public init(type: String, media: String, caption: String? = nil, parseMode: ParseMode? = nil) {
        self.type = type
        self.media = media
        self.caption = caption
        self.parseMode = parseMode
    }

}


public class InputMediaVideo: Codable {
    public var type: String
    public var media: String
    public var thumb: InputFileOrString?
    public var caption: String?
    public var parseMode: ParseMode?
    public var width: Int?
    public var height: Int?
    public var duration: Int?
    public var supportsStreaming: Bool?
    public init(type: String, media: String, thumb: InputFileOrString? = nil, caption: String? = nil, parseMode: ParseMode? = nil, width: Int? = nil, height: Int? = nil, duration: Int? = nil, supportsStreaming: Bool? = nil) {
        self.type = type
        self.media = media
        self.thumb = thumb
        self.caption = caption
        self.parseMode = parseMode
        self.width = width
        self.height = height
        self.duration = duration
        self.supportsStreaming = supportsStreaming
    }

}


public class InputMediaAnimation: Codable {
    public var type: String
    public var media: String
    public var thumb: InputFileOrString?
    public var caption: String?
    public var parseMode: ParseMode?
    public var width: Int?
    public var height: Int?
    public var duration: Int?
    public init(type: String, media: String, thumb: InputFileOrString? = nil, caption: String? = nil, parseMode: ParseMode? = nil, width: Int? = nil, height: Int? = nil, duration: Int? = nil) {
        self.type = type
        self.media = media
        self.thumb = thumb
        self.caption = caption
        self.parseMode = parseMode
        self.width = width
        self.height = height
        self.duration = duration
    }

}


public class InputMediaAudio: Codable {
    public var type: String
    public var media: String
    public var thumb: InputFileOrString?
    public var caption: String?
    public var parseMode: ParseMode?
    public var duration: Int?
    public var performer: String?
    public var title: String?
    public init(type: String, media: String, thumb: InputFileOrString? = nil, caption: String? = nil, parseMode: ParseMode? = nil, duration: Int? = nil, performer: String? = nil, title: String? = nil) {
        self.type = type
        self.media = media
        self.thumb = thumb
        self.caption = caption
        self.parseMode = parseMode
        self.duration = duration
        self.performer = performer
        self.title = title
    }

}


public class InputMediaDocument: Codable {
    public var type: String
    public var media: String
    public var thumb: InputFileOrString?
    public var caption: String?
    public var parseMode: ParseMode?
    public init(type: String, media: String, thumb: InputFileOrString? = nil, caption: String? = nil, parseMode: ParseMode? = nil) {
        self.type = type
        self.media = media
        self.thumb = thumb
        self.caption = caption
        self.parseMode = parseMode
    }

}


public class Sticker: Codable {
    public var fileId: String
    public var fileUniqueId: String
    public var width: Int
    public var height: Int
    public var isAnimated: Bool
    public var thumb: PhotoSize?
    public var emoji: String?
    public var setName: String?
    public var maskPosition: MaskPosition?
    public var fileSize: Int?
    public init(fileId: String, fileUniqueId: String, width: Int, height: Int, isAnimated: Bool, thumb: PhotoSize? = nil, emoji: String? = nil, setName: String? = nil, maskPosition: MaskPosition? = nil, fileSize: Int? = nil) {
        self.fileId = fileId
        self.fileUniqueId = fileUniqueId
        self.width = width
        self.height = height
        self.isAnimated = isAnimated
        self.thumb = thumb
        self.emoji = emoji
        self.setName = setName
        self.maskPosition = maskPosition
        self.fileSize = fileSize
    }

}


public class StickerSet: Codable {
    public var name: String
    public var title: String
    public var isAnimated: Bool
    public var containsMasks: Bool
    public var stickers: [Sticker] = []
    public var thumb: PhotoSize?
    public init(name: String, title: String, isAnimated: Bool, containsMasks: Bool, stickers: [Sticker], thumb: PhotoSize? = nil) {
        self.name = name
        self.title = title
        self.isAnimated = isAnimated
        self.containsMasks = containsMasks
        self.stickers = stickers
        self.thumb = thumb
    }

}


public class MaskPosition: Codable {
    public var point: String
    public var xShift: Float
    public var yShift: Float
    public var scale: Float
    public init(point: String, xShift: Float, yShift: Float, scale: Float) {
        self.point = point
        self.xShift = xShift
        self.yShift = yShift
        self.scale = scale
    }

}


public class InlineQuery: Codable {
    public var id: String
    public var from: User
    public var location: Location?
    public var query: String
    public var offset: String
    public init(id: String, from: User, location: Location? = nil, query: String, offset: String) {
        self.id = id
        self.from = from
        self.location = location
        self.query = query
        self.offset = offset
    }

}


public class InlineQueryResultArticle: Codable {
    public var type: String
    public var id: String
    public var title: String
    public var inputMessageContent: InputMessageContent
    public var replyMarkup: InlineKeyboardMarkup?
    public var url: String?
    public var hideUrl: Bool?
    public var description: String?
    public var thumbUrl: String?
    public var thumbWidth: Int?
    public var thumbHeight: Int?
    public init(type: String, id: String, title: String, inputMessageContent: InputMessageContent, replyMarkup: InlineKeyboardMarkup? = nil, url: String? = nil, hideUrl: Bool? = nil, description: String? = nil, thumbUrl: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.title = title
        self.inputMessageContent = inputMessageContent
        self.replyMarkup = replyMarkup
        self.url = url
        self.hideUrl = hideUrl
        self.description = description
        self.thumbUrl = thumbUrl
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

}


public class InlineQueryResultPhoto: Codable {
    public var type: String
    public var id: String
    public var photoUrl: String
    public var thumbUrl: String
    public var photoWidth: Int?
    public var photoHeight: Int?
    public var title: String?
    public var description: String?
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, photoUrl: String, thumbUrl: String, photoWidth: Int? = nil, photoHeight: Int? = nil, title: String? = nil, description: String? = nil, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.photoUrl = photoUrl
        self.thumbUrl = thumbUrl
        self.photoWidth = photoWidth
        self.photoHeight = photoHeight
        self.title = title
        self.description = description
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultGif: Codable {
    public var type: String
    public var id: String
    public var gifUrl: String
    public var gifWidth: Int?
    public var gifHeight: Int?
    public var gifDuration: Int?
    public var thumbUrl: String
    public var title: String?
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, gifUrl: String, gifWidth: Int? = nil, gifHeight: Int? = nil, gifDuration: Int? = nil, thumbUrl: String, title: String? = nil, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.gifUrl = gifUrl
        self.gifWidth = gifWidth
        self.gifHeight = gifHeight
        self.gifDuration = gifDuration
        self.thumbUrl = thumbUrl
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultLocation: Codable {
    public var type: String
    public var id: String
    public var latitude: Float
    public var longitude: Float
    public var title: String
    public var livePeriod: Int?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public var thumbUrl: String?
    public var thumbWidth: Int?
    public var thumbHeight: Int?
    public init(type: String, id: String, latitude: Float, longitude: Float, title: String, livePeriod: Int? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil, thumbUrl: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.latitude = latitude
        self.longitude = longitude
        self.title = title
        self.livePeriod = livePeriod
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
        self.thumbUrl = thumbUrl
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

}


public class InlineQueryResultMpeg4Gif: Codable {
    public var type: String
    public var id: String
    public var mpeg4Url: String
    public var mpeg4Width: Int?
    public var mpeg4Height: Int?
    public var mpeg4Duration: Int?
    public var thumbUrl: String
    public var title: String?
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, mpeg4Url: String, mpeg4Width: Int? = nil, mpeg4Height: Int? = nil, mpeg4Duration: Int? = nil, thumbUrl: String, title: String? = nil, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.mpeg4Url = mpeg4Url
        self.mpeg4Width = mpeg4Width
        self.mpeg4Height = mpeg4Height
        self.mpeg4Duration = mpeg4Duration
        self.thumbUrl = thumbUrl
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultVideo: Codable {
    public var type: String
    public var id: String
    public var videoUrl: String
    public var mimeType: String
    public var thumbUrl: String
    public var title: String
    public var caption: String?
    public var parseMode: ParseMode?
    public var videoWidth: Int?
    public var videoHeight: Int?
    public var videoDuration: Int?
    public var description: String?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, videoUrl: String, mimeType: String, thumbUrl: String, title: String, caption: String? = nil, parseMode: ParseMode? = nil, videoWidth: Int? = nil, videoHeight: Int? = nil, videoDuration: Int? = nil, description: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.videoUrl = videoUrl
        self.mimeType = mimeType
        self.thumbUrl = thumbUrl
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.videoWidth = videoWidth
        self.videoHeight = videoHeight
        self.videoDuration = videoDuration
        self.description = description
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultAudio: Codable {
    public var type: String
    public var id: String
    public var audioUrl: String
    public var title: String
    public var caption: String?
    public var parseMode: ParseMode?
    public var performer: String?
    public var audioDuration: Int?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, audioUrl: String, title: String, caption: String? = nil, parseMode: ParseMode? = nil, performer: String? = nil, audioDuration: Int? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.audioUrl = audioUrl
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.performer = performer
        self.audioDuration = audioDuration
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultVoice: Codable {
    public var type: String
    public var id: String
    public var voiceUrl: String
    public var title: String
    public var caption: String?
    public var parseMode: ParseMode?
    public var voiceDuration: Int?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, voiceUrl: String, title: String, caption: String? = nil, parseMode: ParseMode? = nil, voiceDuration: Int? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.voiceUrl = voiceUrl
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.voiceDuration = voiceDuration
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultDocument: Codable {
    public var type: String
    public var id: String
    public var title: String
    public var caption: String?
    public var parseMode: ParseMode?
    public var documentUrl: String
    public var mimeType: String
    public var description: String?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public var thumbUrl: String?
    public var thumbWidth: Int?
    public var thumbHeight: Int?
    public init(type: String, id: String, title: String, caption: String? = nil, parseMode: ParseMode? = nil, documentUrl: String, mimeType: String, description: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil, thumbUrl: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.documentUrl = documentUrl
        self.mimeType = mimeType
        self.description = description
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
        self.thumbUrl = thumbUrl
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

}


public class InlineQueryResultVenue: Codable {
    public var type: String
    public var id: String
    public var latitude: Float
    public var longitude: Float
    public var title: String
    public var address: String
    public var foursquareId: String?
    public var foursquareType: String?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public var thumbUrl: String?
    public var thumbWidth: Int?
    public var thumbHeight: Int?
    public init(type: String, id: String, latitude: Float, longitude: Float, title: String, address: String, foursquareId: String? = nil, foursquareType: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil, thumbUrl: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.latitude = latitude
        self.longitude = longitude
        self.title = title
        self.address = address
        self.foursquareId = foursquareId
        self.foursquareType = foursquareType
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
        self.thumbUrl = thumbUrl
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

}


public class InlineQueryResultContact: Codable {
    public var type: String
    public var id: String
    public var phoneNumber: String
    public var firstName: String
    public var lastName: String?
    public var vcard: String?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public var thumbUrl: String?
    public var thumbWidth: Int?
    public var thumbHeight: Int?
    public init(type: String, id: String, phoneNumber: String, firstName: String, lastName: String? = nil, vcard: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil, thumbUrl: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.phoneNumber = phoneNumber
        self.firstName = firstName
        self.lastName = lastName
        self.vcard = vcard
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
        self.thumbUrl = thumbUrl
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

}


public class InlineQueryResultGame: Codable {
    public var type: String
    public var id: String
    public var gameShortName: String
    public var replyMarkup: InlineKeyboardMarkup?
    public init(type: String, id: String, gameShortName: String, replyMarkup: InlineKeyboardMarkup? = nil) {
        self.type = type
        self.id = id
        self.gameShortName = gameShortName
        self.replyMarkup = replyMarkup
    }

}


public class InlineQueryResultCachedPhoto: Codable {
    public var type: String
    public var id: String
    public var photoFileId: String
    public var title: String?
    public var description: String?
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, photoFileId: String, title: String? = nil, description: String? = nil, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.photoFileId = photoFileId
        self.title = title
        self.description = description
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultCachedGif: Codable {
    public var type: String
    public var id: String
    public var gifFileId: String
    public var title: String?
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, gifFileId: String, title: String? = nil, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.gifFileId = gifFileId
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultCachedMpeg4Gif: Codable {
    public var type: String
    public var id: String
    public var mpeg4FileId: String
    public var title: String?
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, mpeg4FileId: String, title: String? = nil, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.mpeg4FileId = mpeg4FileId
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultCachedSticker: Codable {
    public var type: String
    public var id: String
    public var stickerFileId: String
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, stickerFileId: String, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.stickerFileId = stickerFileId
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultCachedDocument: Codable {
    public var type: String
    public var id: String
    public var title: String
    public var documentFileId: String
    public var description: String?
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, title: String, documentFileId: String, description: String? = nil, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.title = title
        self.documentFileId = documentFileId
        self.description = description
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultCachedVideo: Codable {
    public var type: String
    public var id: String
    public var videoFileId: String
    public var title: String
    public var description: String?
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, videoFileId: String, title: String, description: String? = nil, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.videoFileId = videoFileId
        self.title = title
        self.description = description
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultCachedVoice: Codable {
    public var type: String
    public var id: String
    public var voiceFileId: String
    public var title: String
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, voiceFileId: String, title: String, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.voiceFileId = voiceFileId
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InlineQueryResultCachedAudio: Codable {
    public var type: String
    public var id: String
    public var audioFileId: String
    public var caption: String?
    public var parseMode: ParseMode?
    public var replyMarkup: InlineKeyboardMarkup?
    public var inputMessageContent: InputMessageContent?
    public init(type: String, id: String, audioFileId: String, caption: String? = nil, parseMode: ParseMode? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.audioFileId = audioFileId
        self.caption = caption
        self.parseMode = parseMode
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

}


public class InputTextMessageContent: Codable {
    public var messageText: String
    public var parseMode: ParseMode?
    public var disableWebPagePreview: Bool?
    public init(messageText: String, parseMode: ParseMode? = nil, disableWebPagePreview: Bool? = nil) {
        self.messageText = messageText
        self.parseMode = parseMode
        self.disableWebPagePreview = disableWebPagePreview
    }

}


public class InputLocationMessageContent: Codable {
    public var latitude: Float
    public var longitude: Float
    public var livePeriod: Int?
    public init(latitude: Float, longitude: Float, livePeriod: Int? = nil) {
        self.latitude = latitude
        self.longitude = longitude
        self.livePeriod = livePeriod
    }

}


public class InputVenueMessageContent: Codable {
    public var latitude: Float
    public var longitude: Float
    public var title: String
    public var address: String
    public var foursquareId: String?
    public var foursquareType: String?
    public init(latitude: Float, longitude: Float, title: String, address: String, foursquareId: String? = nil, foursquareType: String? = nil) {
        self.latitude = latitude
        self.longitude = longitude
        self.title = title
        self.address = address
        self.foursquareId = foursquareId
        self.foursquareType = foursquareType
    }

}


public class InputContactMessageContent: Codable {
    public var phoneNumber: String
    public var firstName: String
    public var lastName: String?
    public var vcard: String?
    public init(phoneNumber: String, firstName: String, lastName: String? = nil, vcard: String? = nil) {
        self.phoneNumber = phoneNumber
        self.firstName = firstName
        self.lastName = lastName
        self.vcard = vcard
    }

}


public class ChosenInlineResult: Codable {
    public var resultId: String
    public var from: User
    public var location: Location?
    public var inlineMessageId: String?
    public var query: String
    public init(resultId: String, from: User, location: Location? = nil, inlineMessageId: String? = nil, query: String) {
        self.resultId = resultId
        self.from = from
        self.location = location
        self.inlineMessageId = inlineMessageId
        self.query = query
    }

}


public class LabeledPrice: Codable {
    public var label: String
    public var amount: Int
    public init(label: String, amount: Int) {
        self.label = label
        self.amount = amount
    }

}


public class Invoice: Codable {
    public var title: String
    public var description: String
    public var startParameter: String
    public var currency: String
    public var totalAmount: Int
    public init(title: String, description: String, startParameter: String, currency: String, totalAmount: Int) {
        self.title = title
        self.description = description
        self.startParameter = startParameter
        self.currency = currency
        self.totalAmount = totalAmount
    }

}


public class ShippingAddress: Codable {
    public var countryCode: String
    public var state: String
    public var city: String
    public var streetLine1: String
    public var streetLine2: String
    public var postCode: String
    public init(countryCode: String, state: String, city: String, streetLine1: String, streetLine2: String, postCode: String) {
        self.countryCode = countryCode
        self.state = state
        self.city = city
        self.streetLine1 = streetLine1
        self.streetLine2 = streetLine2
        self.postCode = postCode
    }

}


public class OrderInfo: Codable {
    public var name: String?
    public var phoneNumber: String?
    public var email: String?
    public var shippingAddress: ShippingAddress?
    public init(name: String? = nil, phoneNumber: String? = nil, email: String? = nil, shippingAddress: ShippingAddress? = nil) {
        self.name = name
        self.phoneNumber = phoneNumber
        self.email = email
        self.shippingAddress = shippingAddress
    }

}


public class ShippingOption: Codable {
    public var id: String
    public var title: String
    public var prices: [LabeledPrice] = []
    public init(id: String, title: String, prices: [LabeledPrice]) {
        self.id = id
        self.title = title
        self.prices = prices
    }

}


public class SuccessfulPayment: Codable {
    public var currency: String
    public var totalAmount: Int
    public var invoicePayload: String
    public var shippingOptionId: String?
    public var orderInfo: OrderInfo?
    public var telegramPaymentChargeId: String
    public var providerPaymentChargeId: String
    public init(currency: String, totalAmount: Int, invoicePayload: String, shippingOptionId: String? = nil, orderInfo: OrderInfo? = nil, telegramPaymentChargeId: String, providerPaymentChargeId: String) {
        self.currency = currency
        self.totalAmount = totalAmount
        self.invoicePayload = invoicePayload
        self.shippingOptionId = shippingOptionId
        self.orderInfo = orderInfo
        self.telegramPaymentChargeId = telegramPaymentChargeId
        self.providerPaymentChargeId = providerPaymentChargeId
    }

}


public class ShippingQuery: Codable {
    public var id: String
    public var from: User
    public var invoicePayload: String
    public var shippingAddress: ShippingAddress
    public init(id: String, from: User, invoicePayload: String, shippingAddress: ShippingAddress) {
        self.id = id
        self.from = from
        self.invoicePayload = invoicePayload
        self.shippingAddress = shippingAddress
    }

}


public class PreCheckoutQuery: Codable {
    public var id: String
    public var from: User
    public var currency: Int
    public var invoicePayload: String
    public var shippingOptionId: String?
    public var orderInfo: OrderInfo?
    public init(id: String, from: User, currency: Int, invoicePayload: String, shippingOptionId: String? = nil, orderInfo: OrderInfo? = nil) {
        self.id = id
        self.from = from
        self.currency = currency
        self.invoicePayload = invoicePayload
        self.shippingOptionId = shippingOptionId
        self.orderInfo = orderInfo
    }

}


public class Game: Codable {
    public var title: String
    public var description: String
    public var photo: [PhotoSize] = []
    public var text: String?
    public var textEntities: [MessageEntity]? = []
    public var animation: Animation?
    public init(title: String, description: String, photo: [PhotoSize], text: String? = nil, textEntities: [MessageEntity]? = nil, animation: Animation? = nil) {
        self.title = title
        self.description = description
        self.photo = photo
        self.text = text
        self.textEntities = textEntities
        self.animation = animation
    }

}


public class CallbackGame: Codable {
    public init() {
    }

}


public class GameHighScore: Codable {
    public var position: Int
    public var user: User
    public var score: Int
    public init(position: Int, user: User, score: Int) {
        self.position = position
        self.user = user
        self.score = score
    }

}


